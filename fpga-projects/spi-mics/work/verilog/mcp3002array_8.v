/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     NUM_ADCS = 3
     DIVIDE_BY = 120
     ADC_RESOLUTION = 8
*/
module mcp3002array_8 (
    input clk,
    input rst,
    input [2:0] spi_din,
    output reg spi_dout,
    output reg chip_select,
    output reg spi_clock,
    output reg fifo_write_flag,
    output reg [23:0] fifo_data,
    input fifo_full_flag
  );
  
  localparam NUM_ADCS = 2'h3;
  localparam DIVIDE_BY = 7'h78;
  localparam ADC_RESOLUTION = 4'h8;
  
  
  reg [4:0] M_spi_cycle_d, M_spi_cycle_q = 5'h00;
  reg [6:0] M_main_clock_count_d, M_main_clock_count_q = 1'h0;
  reg [23:0] M_samples_d, M_samples_q = 1'h0;
  
  integer i;
  
  always @* begin
    M_main_clock_count_d = M_main_clock_count_q;
    M_spi_cycle_d = M_spi_cycle_q;
    M_samples_d = M_samples_q;
    
    chip_select = 1'h0;
    fifo_write_flag = 1'h0;
    fifo_data = 1'h0;
    M_main_clock_count_d = M_main_clock_count_q + 1'h1;
    if (M_main_clock_count_q == 7'h78) begin
      M_main_clock_count_d = 1'h0;
      M_spi_cycle_d = M_spi_cycle_q + 1'h1;
      if (M_spi_cycle_q == 5'h1f) begin
        M_spi_cycle_d = 1'h0;
      end
    end
    spi_clock = ~(M_spi_cycle_q[0+0-:1]);
    spi_dout = M_spi_cycle_q >= 1'h1 && M_spi_cycle_q <= 4'h8;
    chip_select = M_spi_cycle_q < 1'h1 || M_spi_cycle_q >= 5'h1f;
    if (M_spi_cycle_q[0+0-:1] == 1'h0) begin
      if (M_spi_cycle_q >= 5'h10 && M_spi_cycle_q <= 5'h1e) begin
        for (i = 1'h0; i < 2'h3; i = i + 1) begin
          M_samples_d[(i)*8+((5'h1e - M_spi_cycle_q) / 2'h2)*1+0-:1] = spi_din[(i)*1+0-:1];
        end
      end
    end else begin
      if (M_spi_cycle_q == 5'h1f) begin
        if (fifo_full_flag == 1'h0) begin
          fifo_write_flag = 1'h1;
          fifo_data = {(&M_samples_q[0+7-:8]) ? 8'hfe : M_samples_q[0+7-:8], (&M_samples_q[8+7-:8]) ? 8'hfe : M_samples_q[8+7-:8], (&M_samples_q[16+7-:8]) ? 8'hfe : M_samples_q[16+7-:8]};
        end
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_spi_cycle_q <= 5'h00;
      M_main_clock_count_q <= 1'h0;
      M_samples_q <= 1'h0;
    end else begin
      M_spi_cycle_q <= M_spi_cycle_d;
      M_main_clock_count_q <= M_main_clock_count_d;
      M_samples_q <= M_samples_d;
    end
  end
  
endmodule
