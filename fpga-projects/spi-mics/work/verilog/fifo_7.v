/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     SIZE = 24
     DEPTH = 4
*/
module fifo_7 (
    input clk,
    input rst,
    input [23:0] din,
    input wput,
    output reg full,
    output reg [23:0] dout,
    input rget,
    output reg empty
  );
  
  localparam SIZE = 5'h18;
  localparam DEPTH = 3'h4;
  
  
  localparam ADDR_SIZE = 2'h2;
  
  reg [1:0] M_waddr_d, M_waddr_q = 1'h0;
  reg [1:0] M_waddr_delay_d, M_waddr_delay_q = 1'h0;
  reg [1:0] M_raddr_d, M_raddr_q = 1'h0;
  
  wire [24-1:0] M_ram_read_data;
  reg [1-1:0] M_ram_wclk;
  reg [2-1:0] M_ram_waddr;
  reg [24-1:0] M_ram_write_data;
  reg [1-1:0] M_ram_write_en;
  reg [1-1:0] M_ram_rclk;
  reg [2-1:0] M_ram_raddr;
  simple_dual_ram_10 #(.SIZE(5'h18), .DEPTH(3'h4)) ram (
    .wclk(M_ram_wclk),
    .waddr(M_ram_waddr),
    .write_data(M_ram_write_data),
    .write_en(M_ram_write_en),
    .rclk(M_ram_rclk),
    .raddr(M_ram_raddr),
    .read_data(M_ram_read_data)
  );
  
  reg [1:0] next_write;
  
  reg wrdy;
  reg rrdy;
  
  always @* begin
    M_waddr_d = M_waddr_q;
    M_raddr_d = M_raddr_q;
    M_waddr_delay_d = M_waddr_delay_q;
    
    M_ram_wclk = clk;
    M_ram_rclk = clk;
    M_ram_write_en = 1'h0;
    next_write = M_waddr_q + 1'h1;
    M_waddr_delay_d = M_waddr_q;
    wrdy = next_write != M_raddr_q;
    rrdy = M_raddr_q != M_waddr_delay_q;
    full = !wrdy;
    empty = !rrdy;
    M_ram_waddr = M_waddr_q;
    M_ram_raddr = M_raddr_q;
    M_ram_write_data = din;
    if (wput && wrdy) begin
      M_waddr_d = M_waddr_q + 1'h1;
      M_ram_write_en = 1'h1;
    end
    if (rget && rrdy) begin
      M_raddr_d = M_raddr_q + 1'h1;
      M_ram_raddr = M_raddr_q + 1'h1;
    end
    dout = M_ram_read_data;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_waddr_q <= 1'h0;
      M_waddr_delay_q <= 1'h0;
      M_raddr_q <= 1'h0;
    end else begin
      M_waddr_q <= M_waddr_d;
      M_waddr_delay_q <= M_waddr_delay_d;
      M_raddr_q <= M_raddr_d;
    end
  end
  
endmodule
